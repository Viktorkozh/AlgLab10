3 Оптимизация алгоритма: Попробуйте оптимизировать алгоритм Heap Sort. Исследуйте
возможности улучшения производительности, например, путем использования
оптимизированных структур данных или алгоритмических подходов. Сравните вашу
оптимизированную реализацию с базовой версией.

4 Применение в реальной жизни: Рассмотрите практические применения Heap Sort в
реальных сценариях. Например, как этот алгоритм может быть использован для оптимизации
работы баз данных, событийной обработки или других вычислительных задач. Объясните,
почему Heap Sort может быть предпочтительным выбором в некоторых ситуациях.

5 Анализ сложности: Проведите анализ времени выполнения и пространственной
сложности алгоритма Heap Sort. Исследуйте, как эти характеристики зависят от размера
входных данных. Сделайте выводы о том, в каких случаях Heap Sort может быть более или
менее эффективным по сравнению с другими алгоритмами сортировки.

6 Даны массивы A[1…n] и B[1…n]. Мы хотим вывести все n2 сумм вида A[i]+B[j] в
возрастающем порядке. Наивный способ — создать массив, содержащий все такие суммы, и
отсортировать его. Соответствующий алгоритм имеет время работы O(n2logn) и
использует O(n2) памяти. Приведите алгоритм с таким же временем работы, который
использует линейную память.